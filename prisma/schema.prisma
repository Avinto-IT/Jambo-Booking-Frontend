generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Hotel {
  hotelID          String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  address          String
  locationID       String   @db.ObjectId
  facilities       Json
  description      String
  houseRules       Json
  imageLinks       String[]
  primaryImageLink String
  isRunning        Boolean
  rooms            Json
  discount         Float

  location Location  @relation(fields: [locationID], references: [locationID])
  bookings Booking[]
  User     User[]
}

model Blog {
  blogID       String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  primaryImage String
  content      String
  caption      String
  createdAt    DateTime
  imageLinks   String[]
  userId       String
}

model Grade {
  gradeID       String @id @default(auto()) @map("_id") @db.ObjectId
  gradeName     String
  priceModifier String

  User User[]
}

model User {
  userID           String           @id @default(auto()) @map("_id") @db.ObjectId
  agencyName       String
  username         String
  password         String
  email            String           @unique
  contactNumber    String
  role             String //This will be either a) Hotel b) Agent c) Jambo(Admin)
  dateOfBirth      DateTime
  bookings         Booking[]
  bookingHistories BookingHistory[]
  gradeID          String?          @db.ObjectId
  grade            Grade?           @relation(fields: [gradeID], references: [gradeID])
  hotelID          String?          @db.ObjectId
  hotel            Hotel?           @relation(fields: [hotelID], references: [hotelID])
}

model Location {
  locationID String @id @default(auto()) @map("_id") @db.ObjectId
  city       String
  country    String

  hotels Hotel[]
}

model Booking {
  bookingID   String   @id @default(auto()) @map("_id") @db.ObjectId
  userID      String   @db.ObjectId
  hotelID     String   @db.ObjectId
  bookingDate DateTime
  status      String
  guests      Int
  rooms       Int

  user           User             @relation(fields: [userID], references: [userID])
  hotel          Hotel            @relation(fields: [hotelID], references: [hotelID])
  bookingHistory BookingHistory[]
}

model BookingHistory {
  bookingID String @id @default(auto()) @map("_id") @db.ObjectId
  count     Int

  booking Booking @relation(fields: [bookingID], references: [bookingID])
  userID  String  @db.ObjectId
  user    User    @relation(fields: [userID], references: [userID])
}
